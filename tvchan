#!/usr/bin/perl
use strict;
use warnings;
use POSIX ":sys_wait_h";
use Time::HiRes qw(sleep time);
use IO::Handle;
use IO::Select;

# tvchan
# Copyright 2014,2015,2021 Elliot Wolk
# Licensed under the GNU General Public License v3 or later

my @EXTS_VIDEO = qw(
  mkv mks mk3d
  avi webm flv ogv drc
  mov qt
  wmv
  mp4 m4p m4v
  mpg mpeg mpe mpv m2v m2s m1s
  svi 3gp 3g2 divx vob m2ts
);
my @EXTS_MUSIC = qw(mp3 flac ogg m4a wma wav);

my $MAX_OSD_MSG_LEN = 80;
my $DEFAULT_WINDOW_TITLE = "tvchan-mpv";
my $DEFAULT_AUTO_SKIP_DELAY_MILLIS = 30000;

my $MPV_PROPERTIES_ARR = [
  "osd-scale" => "1.5",
  "osd-scale-by-window" => "false",
  "osd-level" => "1",
  "osd-msg1" => "\"\"",
];

my %TVCHAN_COMMAND_KEYS = (
  back     => [qw( F9  1       )],
  forward  => [qw( F10 2 ENTER )],
  end      => [qw( F11 3       )],
  quit     => [qw( F12 4 q     )],
  autoskip => [qw( F5  5       )],
  quitall  => [qw( DEL         )],
);

sub startMPV($$$);
sub runPlaylistCommand($$$$$);
sub ensureIPCServerFifo($);
sub findFiles($$);
sub filterFilesIMDB($$);
sub loadFile($$$$);
sub getRandomEntry($$);
sub getDuration($);
sub writeInputConf($$);
sub socatJson($$);
sub setProperty($$$);
sub isPlaying($);
sub getProcLines(@);
sub getProcLinesNoFail(@);
sub canRead($$);
sub cmdFound($);
sub formatHMS($);
sub isRunning($);
sub nowMillis();

my $usage = "Usage:
  $0 [OPTS] DIR [DIR ..]

  OPTS:
  -b | --beginning | --start
    always start at the beginning of the file

  -u | --uniq | --unique
    show each file at most only once

  -m | --music
    include (@EXTS_MUSIC) instead of just (@EXTS_VIDEO)
    set mpv-property video=false (audio-only, do not show video, like --no-video)
    implies --no-force-window, but this can be overridden with a later --force-window

  -s STRING | --search STRING | --imdb STRING
    use 'imdb' crawling+caching script to filter files

  -a [SECONDS] | --autoskip [SECONDS] | --autoskip=SECONDS
     start in autoskip mode, and optionally set the delay to SECONDS
       {default is " . sprintf("%.1f", $DEFAULT_AUTO_SKIP_DELAY_MILLIS/1000.0) . "}
     SECONDS (optional) is the number of fractional seconds to wait before running forward
     autoskip timer is reset when a new video is opened
     autoskip is suspended/resumed when 'auto' key command is run

  --show-progress
    after loading each file, run mpv command 'show-progress'
  --no-show-progress
    do not run mpv command 'show-progress' after loading each file (this is the default)

  --show-message
    after loading each file, run mpv command 'show-text' with a message (this is the default)
    message is 'FILENAME POS / DUR (PCT%)'
      FILENAME is file name, with DIRs removed from prefix
      POS is the initial position formatted HH:MM:SS
      DUR is the duration formatted HH:MM:SS
      PCT is POS/DUR*100, rounded to the nearest integer
  --no-show-message
    do not run mpv command 'show-text' after loading each file

  --osd-bar
    set mpv-property osd-bar=true (this is the default)
  --no-osd-bar
    set mpv-property osd-bar=false

  -fs | --fs | --fullscreen
    fullscreen: set mpv-property fullscreen=true (this is the default)
  -nofs | --nofs | -no-fs | --no-fs | --nofullscreen | --no-fullscreen
    no fullscreen: set mpv-property fullscreen=false (this is the default)

  --force-window
    set mpv-property force-window=true (this is the default)
    (reuse the same window for playback of all files)
  --no-force-window
    set mpv-property force-window=false
    (use a new window for playback of all files)

  -g GEOMETRY | -geometry GEOMETRY | --geometry GEOMETRY | --geometry=GEOMETRY
     set geometry to mpv with mpv-property geometry=GEOMETRY
     e.g: '-geometry 500x500+50+50'

  -t TITLE | -title TITLE | --title TITLE | --title=TITLE
    set the mpv window title with mpv-property title=TITLE
    default is $DEFAULT_WINDOW_TITLE
";

sub main(@){
  my $autoSkip = 0;
  my $music = 0;
  my $begin = 0;
  my $unique = 0;
  my $showProgress = 0;
  my $showMessage = 1;
  my $osdBar = 1;
  my $fullscreen = 1;
  my $forceWindow = 1;
  my $geometry = undef;
  my $windowTitle = $DEFAULT_WINDOW_TITLE;
  my $autoSkipDelayMillis = $DEFAULT_AUTO_SKIP_DELAY_MILLIS;
  my $imdbQuery;
  my $dirs = [];
  while(@_ > 0){
    my $arg = shift;
    if($arg =~ /^(-b|--beginning|--start)$/){
      $begin = 1;
    }elsif($arg =~ /^(-u|--uniq|--unique)$/ and @_ > 0){
      $unique = 1;
    }elsif($arg =~ /^(-m|--music)$/){
      $music = 1;
      $forceWindow = 0;
    }elsif($arg =~ /^(-s|--search|--imdb)$/ and @_ > 0){
      $imdbQuery = shift;
    }elsif($arg =~ /^--autoskip=(\d+|\d*\.\d+)$/){
      $autoSkip = 1;
      $autoSkipDelayMillis = int($1 * 1000 + 0.5);
    }elsif($arg =~ /^(-a|--autoskip)$/ and @_ > 0 and $_[0] =~ /^\d+|\d*\.\d+$/){
      $autoSkip = 1;
      my $autoSkipDelaySeconds = shift;
      $autoSkipDelayMillis = int($autoSkipDelaySeconds * 1000 + 0.5);
    }elsif($arg =~ /^(-a|--autoskip)$/){
      $autoSkip = 1;
    }elsif($arg =~ /^(--show-progress)$/){
      $showProgress = 1;
    }elsif($arg =~ /^(--no-show-progress)$/){
      $showProgress = 0;
    }elsif($arg =~ /^(--show-message)$/){
      $showMessage = 1;
    }elsif($arg =~ /^(--no-show-message)$/){
      $showMessage = 0;
    }elsif($arg =~ /^(--osd-bar)$/){
      $osdBar = 1;
    }elsif($arg =~ /^(--no-osd-bar)$/){
      $osdBar = 0;
    }elsif($arg =~ /^(-fs|--fs|--fullscreen)$/){
      $fullscreen = 1;
    }elsif($arg =~ /^(-nofs|--nofs|-no-fs|--no-fs|--nofullscreen|--no-fullscreen)$/){
      $fullscreen = 0;
    }elsif($arg =~ /^(--force-window)$/){
      $forceWindow = 1;
    }elsif($arg =~ /^(--no-force-window)$/){
      $forceWindow = 0;
    }elsif($arg =~ /^--geometry=(.+)$/){
      $geometry = $1;
    }elsif($arg =~ /^(-g|-geometry|--geometry)$/ and @_ > 0){
      $geometry = shift;
    }elsif($arg =~ /^--title=(.+)$/){
      $windowTitle = $1;
    }elsif($arg =~ /^(-t|-title|--title)$/ and @_ > 0){
      $windowTitle = shift;
    }elsif(-d $arg){
      push @$dirs, $arg;
    }else{
      die "$usage\nERROR: unknown arg $arg\n";;
    }
  }
  die "$usage\nERROR: must give at least one DIR\n" if @$dirs == 0;

  my $nowMillis = nowMillis();
  my $ipcServerFifo = "/tmp/mpv-tvchan-commands-$nowMillis";
  my $inputConfFile = "/tmp/mpv-tvchan-input-$nowMillis.conf";

  my $inputConf = {};
  for my $tvchanCmd(sort keys %TVCHAN_COMMAND_KEYS){
    my @keynames = @{$TVCHAN_COMMAND_KEYS{$tvchanCmd}};
    $$inputConf{$_} = "print-text tvchan-cmd:$tvchanCmd" foreach @keynames;
  }

  writeInputConf($inputConfFile, $inputConf);

  my $exts = $music ? [@EXTS_VIDEO, @EXTS_MUSIC] : [@EXTS_VIDEO];

  my $files = findFiles($dirs, $exts);
  if(defined $imdbQuery){
    $files = filterFilesIMDB($files, $imdbQuery);
  }

  my $playlistState = {
    files       => $files,
    history     => [],
    index       => 0,
    autoSkip    => $autoSkip,
    startMillis => undef,
    dirs        => $dirs,
  };

  my $playOptions = {
    unique       => $unique,
    begin        => $begin,
    showProgress => $showProgress,
    showMessage  => $showMessage,
  };

  my $mpvPropArr = [
     "video"        => ($music ? "false" : "true"),
     "osd-bar"      => ($osdBar ? "true" : "false"),
     "title"        => "\"$windowTitle\"",
     "fullscreen"   => ($fullscreen ? "true" : "false"),
     "force-window" => ($forceWindow ? "true" : "false"),
     "geometry"     => (defined $geometry ? "\"$geometry\"" : "\"\""),
     @$MPV_PROPERTIES_ARR,
  ];

  my ($mpvPid, $mpvCmdFH) = startMPV(
    $inputConfFile, $ipcServerFifo, $mpvPropArr);

  my $ioSelect = IO::Select->new($mpvCmdFH);
  my $ioHandle = IO::Handle->new_from_fd($mpvCmdFH, "r");
  $ioHandle->blocking(0);

  while(1){
    if(not isPlaying($ipcServerFifo)){
      runPlaylistCommand("forward", $mpvPid, $ipcServerFifo, $playlistState, $playOptions);
    }

    if($$playlistState{autoSkip}){
      my $elapsedMillis = nowMillis() - $$playlistState{startMillis};
      if($elapsedMillis > $autoSkipDelayMillis){
        print "\nauto-skipped\n";
        runPlaylistCommand("forward", $mpvPid, $ipcServerFifo, $playlistState, $playOptions);
      }
    }

    my $line;
    if(canRead($ioSelect, 0.5)){
      $line = $ioHandle->getline();
      print $line if defined $line;
      if(defined $line and $line =~ /tvchan-cmd:(\w+)/){
        my $cmd = $1;
        runPlaylistCommand($cmd, $mpvPid, $ipcServerFifo, $playlistState, $playOptions);
      }
    }
  }
  close $mpvCmdFH;
}

sub startMPV($$$){
  my ($inputConfFile, $ipcServerFifo, $mpvPropertiesArr) = @_;
  system "rm", "-f", $ipcServerFifo;

  my @mpvCmd = ("mpv");
  push @mpvCmd, "--idle";
  push @mpvCmd, "--input-conf=$inputConfFile";
  push @mpvCmd, "--input-ipc-server=$ipcServerFifo";

  my $cmd = "@mpvCmd";
  if(cmdFound("script")){
    $cmd = "script -q -f -c '$cmd' /dev/null";
  }

  my ($mpvPid, $mpvCmdFH);
  $mpvPid = open $mpvCmdFH, "-|", "$cmd";

  ensureIPCServerFifo($ipcServerFifo);
  print "IPC server fifo: $ipcServerFifo\n";

  for(my $i=0; $i<@$mpvPropertiesArr; $i+=2){
    my $propertyName = $$mpvPropertiesArr[$i];
    my $val = $$mpvPropertiesArr[$i+1];
    setProperty($ipcServerFifo, $propertyName, $val);
  }

  return ($mpvPid, $mpvCmdFH);
}

sub runPlaylistCommand($$$$$){
  my ($cmd, $mpvPid, $ipcServerFifo, $playlistState, $playOptions) = @_;

  if($cmd eq "back"){
    $$playlistState{index}--;
    $$playlistState{index} = 0 if $$playlistState{index} < 0;
    loadFile($mpvPid, $ipcServerFifo, $playlistState, $playOptions);
  }elsif($cmd eq "forward"){
    my $historySize = @{$$playlistState{history}};
    $$playlistState{index}++;
    $$playlistState{index} = $historySize if $$playlistState{index} > $historySize;
    loadFile($mpvPid, $ipcServerFifo, $playlistState, $playOptions);
  }elsif($cmd eq "end"){
    my $historySize = @{$$playlistState{history}};
    $$playlistState{index} = $historySize;
    loadFile($mpvPid, $ipcServerFifo, $playlistState, $playOptions);
  }elsif($cmd eq "quit"){
    socatJson($ipcServerFifo, "quit");
    system "kill", "-9", $mpvPid;
    system "stty", "sane";
    exit 0;
  }elsif($cmd eq "autoskip"){
    $$playlistState{autoSkip} = not $$playlistState{autoSkip};
  }elsif($cmd eq "quitall"){
    socatJson($ipcServerFifo, "quit");
    system "kill", "-9", $mpvPid;
    system "stty", "sane";

    system "pkill -9 mpv >/dev/null 2>/dev/null";
    system "nohup pkill -9 tvchan >/dev/null 2>/dev/null &";

    exit 1;
  }else{
    die "ERROR: unknown command \"$cmd\"\n";
  }
}

sub ensureIPCServerFifo($){
  my ($ipcServerFifo) = @_;
  my $startMillis = nowMillis();
  while(not -e $ipcServerFifo){
    if(nowMillis() - $startMillis > 1000){
      die "ERROR: ipc server fifo does not exist \"$ipcServerFifo\"\n";
    }
    sleep 0.1;
  }
}

sub findFiles($$){
  my ($dirs, $exts) = @_;
  my @cmd;
  push @cmd, "find";
  push @cmd, "-L";
  for my $dir(@$dirs){
    die "\"$dir\" is not a directory\n" if not -d $dir;
    push @cmd, $dir;
  }
  @cmd = (@cmd, "-type", "f");
  @cmd = (@cmd, "-not", "-empty");
  push @cmd, "-false";
  for my $ext(@$exts){
    push @cmd, ("-or", "-iname", "*.$ext");
  }

  my $files = getProcLines @cmd;
  chomp foreach @$files;
  return $files;
}

sub filterFilesIMDB($$){
  my ($files, $imdbQuery) = @_;

  my $filteredFiles = [];
  for my $file(@$files){
    my $imdb = join '', @{getProcLines("imdb", "-c", $file)};
    if($imdb =~ /$imdbQuery/i){
      push @$filteredFiles, $file;
    }
  }
  print "SELECTED:\n" . join "\n", @$files;
  return $filteredFiles;
}

sub loadFile($$$$){
  my ($mpvPid, $ipcServerFifo, $playlistState, $playOptions) = @_;
  my $files = $$playlistState{files};
  my $history = $$playlistState{history};
  my $index = $$playlistState{index};
  my $dirs = $$playlistState{dirs};

  if(not isRunning($mpvPid)){
    die "ERROR: mpv is dead\n";
  }

  my ($file, $pos, $dur);
  if($index < @$history){
    ($file, $pos, $dur) = @{$$history[$index]};
  }else{
    die "no files found\n" if @$files == 0;
    my $deleteEntry = $$playOptions{unique} ? 1 : 0;
    $file = getRandomEntry $files, $deleteEntry;

    $dur = getDuration($file);
    if($$playOptions{begin}){
      $pos = 0;
    }else{
      $pos = sprintf '%.2f', rand() * $dur;
    }
    push @$history, [$file, $pos, $dur];
  }

  my $pct = ($dur == 0 ? 0 : int(100.0*$pos/$dur + 0.5)) . "%";

  my $msg = $file;
  for my $dir(@$dirs){
    $msg =~ s/^$dir//;
  }

  $msg .= "  " . formatHMS($pos) . "/" . formatHMS($dur) . " ($pct)";

  my $len = length $msg;
  if($len > $MAX_OSD_MSG_LEN){
    $msg = substr $msg, $len - $MAX_OSD_MSG_LEN;
  }

  socatJson($ipcServerFifo, "stop");

  $$playlistState{startMillis} = nowMillis();

  print "\n\nPLAYING: $file @ $pos\n\n";
  socatJson($ipcServerFifo, "loadfile \"$file\" replace \"start=$pos\"");

  if($$playOptions{showMessage}){
    socatJson($ipcServerFifo, "show-text \"$msg\" 1500");
  }
  if($$playOptions{showProgress}){
    socatJson($ipcServerFifo, "show-progress");
  }
}

sub getRandomEntry($$){
  my ($arr, $deleteEntry) = @_;
  my $randIndex = rand @$arr;
  my $entry = $$arr[$randIndex];
  splice @$arr, $randIndex, 1 if $deleteEntry;
  return $entry;
}

sub getDuration($){
  my $file = shift;
  die "Could not find \"$file\"\n" if not -f $file;
  my $durLines = getProcLines "duration", "-n", "-s", $file;
  my $dur;
  if(@$durLines == 1 and $$durLines[0] =~ /^(\d+|\d*\.\d+)$/){
    return $1;
  }else{
    print STDERR "ERROR: failed to obtain duration of $file\n";
    return 0;
  }
}

sub writeInputConf($$){
  my ($inputConfFile, $inputConf) = @_;
  my $conf = '';
  for my $key(keys %$inputConf){
    $conf .= "$key $$inputConf{$key}\n";
  }
  open FH, "> $inputConfFile" or die "Could not write to $inputConfFile\n";
  print FH $conf;
  close FH;
}

sub socatJson($$){
  my ($ipcServerFifo, $json) = @_;
  return undef if not -e $ipcServerFifo;
  $json =~ s/'/'\\''/g;
  my $out = `echo '$json' | socat - $ipcServerFifo 2>/dev/null`;
  chomp $out;
  return $out;
}

sub setProperty($$$){
  my ($ipcServerFifo, $property, $value) = @_;
  my $json = "{ \"command\": [\"set_property\", \"$property\", $value] }";
  my $out = socatJson $ipcServerFifo, $json;
  print $out;
}

sub isPlaying($){
  my ($ipcServerFifo, $property, $value) = @_;
  my $json = '{ "command": ["get_property", "filename"] }';
  my $out = socatJson $ipcServerFifo, $json;

  return 0 if not defined $out;

  if($out =~ /"error":"success"/){
    return 1;
  }elsif($out =~ /"error":"property unavailable"/){
    return 0;
  }
  print "$out\n";

  return 0;
}

sub getProcLines(@){
  open FH, "-|", @_;
  my @lines = <FH>;
  close FH;
  return \@lines;
}

sub canRead($$){
  my ($ioSelect, $timeout) = @_;
  my @ready = $ioSelect->can_read($timeout);
  return @ready == 1;
}

sub cmdFound($){
  my ($cmd) = @_;
  my $cmdPath = `which $cmd 2>&1`;
  chomp $cmdPath;
  if(-x $cmdPath){
    return 1;
  }else{
    return 0;
  }
}

sub formatHMS($){
  my ($t) = @_;
  $t = int(0.5 + $t);
  my $h = int($t / 60 / 60);
  my $m = int($t / 60) % 60;
  my $s = $t % 60;
  return sprintf "%02d:%02d:%02d", $h, $m, $s;
}

sub isRunning($){
  my ($pid) = @_;
  waitpid $pid, 1;
  system "kill", "-0", $pid;
  if($? == 0){
    return 1;
  }else{
    return 0;
  }
}

sub nowMillis(){
  return int(time * 1000.0 + 0.5);
}

&main(@ARGV);
