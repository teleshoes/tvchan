#!/usr/bin/perl
use strict;
use warnings;
use POSIX ":sys_wait_h";
use Time::HiRes qw(sleep time);

my @ext = qw(mkv mp4 avi wmv m2ts);

my $msgLen = 60;

my $tmpDir = "/tmp/tvchan";
my $mplayerConfFile = "$tmpDir/mplayer.conf";
my $inputCmdFile = "$tmpDir/initcmds";
my $inputCmdFifo = "$tmpDir/mplayer-fifo";
my $tvchanFifo = "$tmpDir/tvchan-fifo";
my $inputConfFile = "$tmpDir/input.conf";
my $defaultAutoSkipDelay = 30;

my $mplayerConf = {
  "fs"                => "yes",
  "subfont-osd-scale" => 2,
};

my %commands = (
  back     => [qw( F9  1       )],
  forward  => [qw( F10 2 ENTER )],
  end      => [qw( F11 3       )],
  quit     => [qw( F12 4 q     )],
  autoskip => [qw( F5  5       )],
);
my %exitCodes = map {$_ => 0} keys %commands;

my $inputConf = {};
for my $cmd(keys %commands){
  my $keys = $commands{$cmd};
  $$inputConf{$_} = "run \"echo $cmd > $tvchanFifo\"" foreach @$keys;
}

sub execMplayer($);
sub ensureFile($);
sub playFile($);
sub mplayerCmd($);
sub tvchanCmd($);
sub getRandomEntry($);
sub getRandomPos($);
sub writeInputConf();
sub writeMplayerConf();
sub getProcLines(@);

my $usage = "Usage:
  $0 [OPTS] DIR [DIR ..]

  OPTS:
  --autoskip  | --autoskip=SECONDS
     start in autoskip mode, and optionally set the delay to SECONDS
       {default is $defaultAutoSkipDelay}
     SECONDS is the number of seconds to wait before running forward
     autoskip timer is reset when a new video is opened
     autoskip is suspended/resumed when 'auto' key command is run
";

sub main(@){
  system "mkdir", "-p", $tmpDir;
  my $autoSkip = 0;
  my $autoSkipDelay = $defaultAutoSkipDelay;
  while(@_ > 0 and $_[0] =~ /^-/){
    my $arg = shift;
    if($arg =~ /^--autoskip(?:=(\d+))?$/){
      $autoSkip = 1;
      $autoSkipDelay = $1 if defined $1;
    }else{
      die $usage;
    }
  }

  my @dirs = @_;
  die $usage if @dirs == 0;

  writeInputConf;
  writeMplayerConf;

  my @cmd;
  push @cmd, "find";
  for my $dir(@dirs){
    die "\"$dir\" is not a directory\n" if not -d $dir;
    push @cmd, $dir;
  }
  push @cmd, "-false";
  for my $ext(@ext){
    push @cmd, ("-or", "-iname", "*.$ext");
  }

  my $files = getProcLines @cmd;
  chomp foreach @$files;

  my $state = {
    files => $files,
    dirs => [@dirs],
    history => [],
    index => 0,
    curFile => undef,
    curPos => undef,
    curMsg => undef,
  };

  ensureFile $state;

  my $start = time;

  if(fork){
    while(1){
      my $pid = fork;
      if($pid == 0){
        execMplayer($state);
      }else{
        my $status;
        my $kid;
        do{
          $kid = waitpid $pid, WNOHANG;
          $status = $?;
          $status /= 256 if $status > 256;
          sleep 0.5;
          if($autoSkip && time - $start > $autoSkipDelay){
            $start = time;
            print "\nauto-skipped\n";
            tvchanCmd "forward";
          }
        } while $kid == 0;
        tvchanCmd "forward";
      }
    }
  }

  sleep 0.1;

  system "rm", $tvchanFifo;
  system "mkfifo", $tvchanFifo;

  my $fh;
  open($fh, "+< $tvchanFifo") or die "cannot read $tvchanFifo\n";
  while (<$fh>){
    my $cmd = $_;
    chomp $cmd;
    print "\n\n\n\n\nread command: $cmd\n\n";
    if($cmd eq "back"){
      $$state{index}--;
      $$state{index} = 0 if $$state{index} < 0;
      ensureFile $state;
      playFile $state;
    }elsif($cmd eq "forward"){
      $$state{index}++;
      $$state{index} = @{$$state{history}} if $$state{index} > @{$$state{history}};
      ensureFile $state;
      playFile $state;
    }elsif($cmd eq "end"){
      $$state{index} = @{$$state{history}};
      ensureFile $state;
      playFile $state;
    }elsif($cmd eq "quit"){
      mplayerCmd "quit";
      exit 0;
    }elsif($cmd eq "autoskip"){
      $autoSkip = not $autoSkip;
    }else{
      print "UNKNOWN COMMAND: $cmd\n";
    }
  }
}

sub execMplayer($){
  my $state = shift;
  print "\n\nPLAYING START FILE: $$state{curFile} @ $$state{curPos}\n\n";
  system "rm", $inputCmdFifo;
  system "mkfifo", $inputCmdFifo;
  exec "mplayer",
    "-input", "conf=$inputConfFile",
    "-input", "file=$inputCmdFile",
    "-input", "file=$inputCmdFifo",
    "-include", $mplayerConfFile,
    "-ss", $$state{curPos},
    $$state{curFile},
  ;
}

sub ensureFile($){
  my $state = shift;
  my $history = $$state{history};
  my $index = $$state{index};
  my ($file, $pos);
  if($index < @$history){
    ($file, $pos) = @{$$history[$index]};
  }else{
    $file = getRandomEntry $$state{files};
    $pos = getRandomPos $file;
    push @$history, [$file, $pos];
  }

  my $msg = $file;
  for my $dir(@{$$state{dirs}}){
    $msg =~ s/^$dir//;
  }
  my $len = length $msg;
  if($len > $msgLen){
    $msg = substr $msg, $len - $msgLen;
  }
  $$state{curFile} = $file;
  $$state{curPos} = $pos;
  $$state{curMsg} = $msg;
}

sub playFile($){
  my $state = shift;
  print "\n\nPLAYING: $$state{curFile} @ $$state{curPos}\n\n";
  mplayerCmd "loadfile \"$$state{curFile}\"";
  mplayerCmd "seek $$state{curPos} 1";
  mplayerCmd "osd_show_text \"$$state{curMsg}\" 1000",
}

sub mplayerCmd($){
  open FH, "> $inputCmdFifo" or die "Could not write to $inputCmdFifo\n";
  print FH "$_[0]\n";
  close FH;
}
sub tvchanCmd($){
  open FH, "> $tvchanFifo" or die "Could not write to $tvchanFifo\n";
  print FH "$_[0]\n";
  close FH;
}

sub getRandomEntry($){
  my $arr = shift;
  my $randIndex = rand @$arr;
  return $$arr[$randIndex];
}

sub getRandomPos($){
  my $file = shift;
  die "Could not find \"$file\"\n" if not -f $file;
  my $durLines = getProcLines "duration", "-n", "-s", $file;
  die "Error running duration on $file\n" if @$durLines != 1;
  my $dur = $$durLines[0];
  chomp $dur;

  die "Malformed duration: $dur\n" if $dur !~ /^\d+(\.\d+)?$/;
  my $pos = rand() * $dur;
  return sprintf '%.2f', $pos;
}

sub writeInputConf(){
  my $conf = '';
  for my $key(keys %$inputConf){
    $conf .= "$key $$inputConf{$key}\n";
  }
  open FH, "> $inputConfFile" or die "Could not write to $inputConfFile\n";
  print FH $conf;
  close FH;
}

sub writeMplayerConf(){
  my $conf = '';
  for my $key(keys %$mplayerConf){
    $conf .= "$key=$$mplayerConf{$key}\n";
  }
  open FH, "> $mplayerConfFile" or die "Could not write to $mplayerConfFile\n";
  print FH $conf;
  close FH;
}

sub getProcLines(@){
  open FH, "-|", @_;
  my @lines = <FH>;
  close FH;
  die "Error running \"@_\"\n" if $? != 0;
  return \@lines;
}

&main(@ARGV);
